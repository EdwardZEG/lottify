<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lottify - Jugar Lotería Móvil</title>
    <link rel="icon" type="image/svg+xml" href="/img/logo_header.svg">

    <!-- CDN de Alpine.js -->
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>

    <!-- CDN de Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- CDN de Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <!-- Socket.io -->
    <script src="/socket.io/socket.io.js"></script>

    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800;900&display=swap');

        * {
            margin: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: #000000;
            color: white;
            overflow-x: hidden;
            height: 100vh;
        }

        /* Animaciones para el reloj */
        @keyframes pulse {
            0% {
                transform: scale(1);
                opacity: 1;
            }


            50% {
                transform: scale(1.1);
                opacity: 0.7;
            }

            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        /* Animaciones para las cartas - COPIADAS DE PC */
        .current-card-pure {
            transition: all 0.6s ease;
        }

        .current-card-pure.changing {
            transform: rotateY(90deg) scale(0.8);
            opacity: 0.5;
        }

        .current-card-pure.appearing {
            animation: cardAppear 0.5s ease-out;
        }

        @keyframes cardAppear {
            0% {
                transform: rotateY(-90deg) scale(0.8);
                opacity: 0;
            }

            100% {
                transform: rotateY(0deg) scale(1);
                opacity: 1;
            }
        }

        /* Estilos para cartilla - COPIADOS DE PC */
        .cartilla-card {
            transition: all 0.2s ease;
            cursor: pointer;
        }

        .cartilla-card.selected {
            border-color: #22c55e !important;
            box-shadow: 0 0 20px rgba(34, 197, 94, 0.5);
            transform: scale(1.02);
        }

        .cartilla-card.selectable {
            border-color: #fbbf24 !important;
            box-shadow: 0 0 15px rgba(251, 191, 36, 0.4);
            animation: cardPulse 1s infinite;
        }

        @keyframes cardPulse {

            0%,
            100% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.05);
            }
        }

        .cartilla-card.pulse {
            animation: selectPulse 1s ease-out;
        }

        @keyframes selectPulse {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.1);
                box-shadow: 0 0 30px rgba(34, 197, 94, 0.8);
            }

            100% {
                transform: scale(1);
            }
        }

        /* Botones de control - COPIADOS DE PC */
        .control-button {
            transition: all 0.2s ease;
        }

        .control-button:hover {
            background: rgba(255, 255, 255, 0.2) !important;
            transform: scale(1.1);
        }

        .control-button:active {
            transform: scale(0.95);
        }

        /* Header móvil optimizado */
        .game-header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: #000000;
            padding: 8px 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 100;
            font-size: 12px;
            color: #fff;
            height: 50px;
        }

        .game-header-left {
            display: flex;
            gap: 10px;
            align-items: center;
            font-size: 11px;
        }

        .game-header-right {
            color: #ffffff;
            font-weight: 600;
            font-size: 11px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .sidebar-footer-btn {
            display: flex;
            align-items: center;
            gap: 6px;
            cursor: pointer;
            padding: 3px 8px;
            border-radius: 6px;
            transition: all 0.3s ease;
            background: transparent;
            border: none;
            color: white;
            font-size: 11px;
        }

        .sidebar-footer-btn:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .user-avatar {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: #444;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            color: #fff;
            font-weight: 600;
            flex-shrink: 0;
        }

        .user-avatar img {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            object-fit: cover;
        }

        .user-name {
            font-weight: 500;
            max-width: 80px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .arrow-game {
            font-size: 10px;
        }

        /* Mobile Game Screen - New Complete Structure */
        .mobile-game-screen {
            height: 100vh;
            background: #0d1117;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        /* Mobile Game Header */
        .mobile-game-header {
            display: flex;
            align-items: center;
            padding: clamp(8px, 2vw, 15px);
            background: linear-gradient(135deg, #1a1a1a, #2d2d2d);
            border-bottom: 1px solid #333;
            gap: clamp(10px, 3vw, 20px);
            min-height: 80px;
        }

        .mobile-logo {
            flex-shrink: 0;
            width: clamp(60px, 15vw, 80px);
            height: clamp(40px, 10vw, 60px);
        }

        .mobile-logo img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        /* Current Card Section */
        .mobile-current-card-section {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 8px;
        }

        .mobile-current-card-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
        }

        .mobile-card-counter {
            font-size: clamp(10px, 2.5vw, 12px);
            color: #aaa;
            font-weight: 500;
        }

        .mobile-current-card {
            width: clamp(80px, 20vw, 120px);
            height: clamp(106px, 26vw, 160px);
            background: #222;
            border: 2px solid #444;
            border-radius: 8px;
            overflow: hidden;
            position: relative;
            transition: transform 0.6s ease;
        }

        .mobile-current-card.card-flip {
            transform: rotateY(360deg);
        }

        .mobile-current-card img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .no-card-message {
            color: #666;
            font-size: clamp(10px, 2.5vw, 12px);
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
        }

        /* Timer Section */
        .mobile-timer-section {
            width: 100%;
            max-width: 200px;
        }

        .mobile-time-bar-container {
            width: 100%;
            height: 6px;
            background: #333;
            border-radius: 3px;
            overflow: hidden;
            margin-bottom: 4px;
        }

        .mobile-time-bar {
            height: 100%;
            background: linear-gradient(90deg, #ff6b6b, #feca57, #48dbfb);
            border-radius: 3px;
            transition: width 0.1s linear;
        }

        .mobile-time-text {
            font-size: clamp(10px, 2.5vw, 11px);
            color: #ccc;
            text-align: center;
        }

        /* Mobile Game Content */
        .mobile-game-content {
            flex: 1;
            display: flex;
            gap: clamp(8px, 2vw, 15px);
            padding: clamp(8px, 2vw, 15px);
            overflow: hidden;
        }

        /* Cartilla Section */
        .mobile-cartilla-section {
            flex: 2;
            display: flex;
            flex-direction: column;
            background: #1a1a1a;
            border-radius: 9.6px;
            /* 20% menos que 12px */
            border: 1px solid #333;
            overflow: hidden;
            max-width: 80vw;
        }

        .mobile-cartilla-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: clamp(8px, 2vw, 12px);
            background: #222;
            border-bottom: 1px solid #333;
        }

        .mobile-cartilla-header h3 {
            color: #fff;
            font-size: clamp(12px, 3vw, 14px);
            font-weight: 600;
            margin: 0;
        }

        .mobile-card-count {
            color: #feca57;
            font-size: clamp(11px, 2.5vw, 13px);
            font-weight: 600;
            padding: 4px 8px;
            background: rgba(254, 202, 87, 0.1);
            border-radius: 12px;
        }

        /* Cards Grid */
        .mobile-cartilla-grid {
            flex: 1;
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: clamp(2.4px, 0.8vw, 4.8px);
            /* 20% menos */
            padding: clamp(4.8px, 1.2vw, 8px);
            /* 20% menos */
            overflow: auto;
        }

        .mobile-card-slot {
            aspect-ratio: 3/4;
            background: #fff;
            border-radius: 4.8px;
            /* 20% menos que 6px */
            overflow: hidden;
            cursor: pointer;
            position: relative;
            transition: all 0.2s ease;
            border: 1.6px solid transparent;
            /* 20% menos que 2px */
            max-width: 16vw;
        }

        .mobile-card-slot img {
            width: 80%;
            height: 80%;
            object-fit: cover;
        }

        .mobile-card-slot:active {
            transform: scale(0.95);
        }

        .mobile-card-slot.selected {
            border-color: #28a745;
            box-shadow: 0 0 0 2px rgba(40, 167, 69, 0.3);
        }

        .mobile-card-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(40, 167, 69, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: clamp(12px, 3vw, 16px);
        }

        /* Lotería Button */
        .mobile-loteria-section {
            padding: clamp(8px, 2vw, 12px);
            background: #222;
            border-top: 1px solid #333;
        }

        .mobile-loteria-btn {
            width: 100%;
            background: linear-gradient(45deg, #ff6b6b, #feca57);
            color: #000;
            border: none;
            padding: clamp(10px, 2.5vw, 14px);
            border-radius: 8px;
            font-size: clamp(12px, 3vw, 14px);
            font-weight: 700;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            transition: all 0.2s ease;
            text-transform: uppercase;
        }

        .mobile-loteria-btn:disabled {
            background: #333;
            color: #666;
            cursor: not-allowed;
        }

        .mobile-loteria-btn:not(:disabled):hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3);
        }

        /* Players Section */
        .mobile-players-section {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: #1a1a1a;
            border-radius: 12px;
            border: 1px solid #333;
            overflow: hidden;
        }

        .mobile-players-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: clamp(8px, 2vw, 12px);
            background: #222;
            border-bottom: 1px solid #333;
        }

        .mobile-players-header h3 {
            color: #fff;
            font-size: clamp(12px, 3vw, 14px);
            font-weight: 600;
            margin: 0;
        }

        .mobile-players-count {
            color: #48dbfb;
            font-size: clamp(11px, 2.5vw, 13px);
            font-weight: 600;
            padding: 4px 8px;
            background: rgba(72, 219, 251, 0.1);
            border-radius: 12px;
        }

        /* Players List */
        .mobile-players-list {
            flex: 1;
            padding: clamp(6px, 1.5vw, 10px);
            overflow: auto;
            display: flex;
            flex-direction: column;
            gap: clamp(6px, 1.5vw, 8px);
        }

        .mobile-player-item {
            display: flex;
            align-items: center;
            padding: clamp(6px, 1.5vw, 8px);
            background: #333;
            border-radius: 8px;
            gap: clamp(6px, 1.5vw, 10px);
            transition: background 0.2s ease;
        }

        .mobile-player-item.host {
            background: linear-gradient(135deg, #feca57, #ff6b6b);
            color: #000;
        }

        .mobile-player-avatar {
            width: clamp(24px, 6vw, 32px);
            height: clamp(24px, 6vw, 32px);
            border-radius: 50%;
            overflow: hidden;
            position: relative;
            flex-shrink: 0;
        }

        .mobile-player-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .mobile-avatar-initials {
            width: 100%;
            height: 100%;
            background: #007bff;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: clamp(10px, 2.5vw, 12px);
            font-weight: 600;
        }

        .mobile-host-crown {
            position: absolute;
            top: -2px;
            right: -2px;
            color: #feca57;
            font-size: clamp(8px, 2vw, 10px);
            background: #000;
            border-radius: 50%;
            width: clamp(12px, 3vw, 14px);
            height: clamp(12px, 3vw, 14px);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .mobile-player-info {
            flex: 1;
            min-width: 0;
        }

        .mobile-player-name {
            font-size: clamp(11px, 2.5vw, 12px);
            font-weight: 600;
            color: #fff;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            margin-bottom: 2px;
        }

        .mobile-player-item.host .mobile-player-name {
            color: #000;
        }

        .mobile-player-status {
            display: flex;
            align-items: center;
            justify-content: space-between;
            font-size: clamp(9px, 2vw, 10px);
        }

        .mobile-cards-selected {
            color: #aaa;
            font-weight: 500;
        }

        .mobile-player-item.host .mobile-cards-selected {
            color: rgba(0, 0, 0, 0.7);
        }

        .mobile-connection-status {
            display: flex;
            align-items: center;
        }

        .mobile-connection-status.online {
            color: #28a745;
        }

        .mobile-connection-status.offline {
            color: #dc3545;
        }

        /* Cartilla y cartas responsivas */
        .cartilla-container {
            background: #fff;
            border-radius: 1.2vw;
            box-shadow: 0 0.6vw 1.8vw rgba(0, 0, 0, 0.08);
            padding: clamp(1px, 0.4vw, 4px);
            width: min(45vw, 130px);
            max-width: 100vw;
            margin: 0 auto;
        }

        .cartilla-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: clamp(0.8px, 0.25vw, 2px);
        }

        .cartilla-card {
            background: #f8fafc;
            border-radius: 0.6vw;
            box-shadow: 0 0.3vw 0.9vw rgba(0, 0, 0, 0.07);
            border: 1px solid #e5e7eb;
            aspect-ratio: 140/190;
            width: 100%;
            max-width: 100%;
            cursor: pointer;
            transition: box-shadow 0.2s, border-color 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .cartilla-card img {
            width: 65%;
            height: 65%;
            object-fit: contain;
            border-radius: 0.3vw;
        }


        @media (max-width: 480px) {
            .cartilla-container {
                width: min(60vw, 110px);
                /* Más reducido para mobile */
                padding: clamp(0.8px, 0.3vw, 2.5px);
            }

            .cartilla-grid {
                gap: clamp(0.5px, 0.2vw, 1.2px);
            }
        }

        @media (max-width: 360px) {
            .cartilla-container {
                width: min(65vw, 100px);
                /* Aún más pequeño para pantallas muy pequeñas */
                padding: 0.5px;
            }

            .cartilla-grid {
                gap: 0.5px;
            }
        }


        .mobile-cartilla-section {
            flex: none;
            height: 52.8vh;
            /* 10% más que 48vh */
            max-width: 70.4vw;
            /* 10% más que 64vw */
            /* 10% más grande que el ajuste anterior */
        }

        .mobile-players-section {
            flex: none;
            height: 25vh;
        }


        @media (max-width: 360px) {
            .mobile-cartilla-grid {
                gap: 1.76px;
                /* 10% más que 1.6px */
            }
        }

        /* Additional animations and effects */
        .pulse {
            animation: pulseCard 0.6s ease;
        }

        @keyframes pulseCard {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.1);
                box-shadow: 0 0 20px rgba(40, 167, 69, 0.6);
            }

            100% {
                transform: scale(1);
            }
        }

        /* Cartilla card styles */
        .cartilla-card.selected {
            border-color: #22c55e !important;
            box-shadow: 0 0 0 2px rgba(34, 197, 94, 0.3) !important;
        }

        .cartilla-card.selectable {
            border-color: #fbbf24 !important;
            box-shadow: 0 0 0 2px rgba(251, 191, 36, 0.3) !important;
            animation: glow 1s infinite alternate;
        }

        @keyframes glow {
            from {
                box-shadow: 0 0 0 2px rgba(251, 191, 36, 0.3);
            }

            to {
                box-shadow: 0 0 0 2px rgba(251, 191, 36, 0.7);
            }
        }

        /* Card flip animation */
        .current-card-pure.changing {
            animation: cardFlip 0.6s ease-in-out;
        }

        @keyframes cardFlip {
            0% {
                transform: rotateY(0deg);
            }

            50% {
                transform: rotateY(90deg);
            }

            100% {
                transform: rotateY(0deg);
            }
        }

        /* User dropdown hover effects */
        .user-dropdown a:hover {
            background: rgba(255, 255, 255, 0.1) !important;
        }

        /* Control button hover effects */
        .control-button:hover {
            background: rgba(255, 255, 255, 0.2) !important;
            transform: scale(1.1);
        }

        .control-button:active {
            transform: scale(0.95);
        }

        /* Estados del juego */
        .game-status {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            z-index: 200;
            display: none;
        }

        .game-status.show {
            display: block;
        }

        .status-title {
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .status-message {
            font-size: 14px;
            margin-bottom: 15px;
        }

        .btn-status {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
        }

        /* Dropdown del usuario */
        .user-menu-container {
            position: relative;
        }

        .user-dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            background: #1a1a1a;
            border-radius: 8px;
            padding: 8px;
            min-width: 150px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            display: none;
            z-index: 1000;
        }

        .user-dropdown.show {
            display: block;
        }

        .dropdown-item {
            color: #fff;
            padding: 8px 12px;
            border-radius: 4px;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 12px;
            cursor: pointer;
            transition: background 0.2s;
            text-decoration: none;
        }

        .dropdown-item:hover {
            background: rgba(255, 255, 255, 0.1);
            color: #fff;
        }

        /* Animaciones */
        .card-flip {
            animation: cardFlip 0.3s ease-in-out;
        }

        @keyframes cardFlip {
            0% {
                transform: rotateY(0deg);
            }

            50% {
                transform: rotateY(90deg);
            }

            100% {
                transform: rotateY(0deg);
            }
        }

        .pulse {
            animation: pulse 1s infinite;
        }

        @keyframes pulse {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.05);
            }

            100% {
                transform: scale(1);
            }
        }

        /* Responsive adjustments */
        @media (max-width: 480px) {
            .game-container {
                padding: 8px;
                gap: 8px;
            }

            .current-card {
                width: 100px;
                height: 100px;
            }

            .player-board {
                gap: 4px;
            }

            .game-header {
                padding: 6px 12px;
                font-size: 11px;
            }
        }

        @media (max-width: 360px) {
            .current-card {
                width: 80px;
                height: 80px;
            }

            .player-board {
                gap: 3px;
            }
        }

        /* Loading overlay */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }

        .loading-spinner {
            border: 3px solid #333;
            border-top: 3px solid #007bff;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Modal de desconexión del host - Diseño compacto y elegante */
        .host-disconnection-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            backdrop-filter: blur(10px);
        }

        .modal-content {
            background: linear-gradient(135deg, rgba(30, 30, 30, 0.95), rgba(20, 20, 20, 0.98));
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 16px;
            padding: 2rem 1.8rem;
            max-width: 320px;
            width: 85%;
            text-align: center;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(20px);
            animation: modalSlideIn 0.3s ease-out;
            position: relative;
            overflow: hidden;
        }

        .modal-content::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: linear-gradient(90deg, #ef4444, #dc2626, #ef4444);
            animation: redGlow 2s infinite;
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px) scale(0.9);
            }

            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        @keyframes redGlow {

            0%,
            100% {
                opacity: 0.8;
            }

            50% {
                opacity: 1;
            }
        }

        .modal-icon {
            width: 50px;
            height: 50px;
            margin: 0 auto 1rem;
            background: linear-gradient(135deg, #ef4444, #dc2626);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: white;
            box-shadow: 0 4px 20px rgba(239, 68, 68, 0.5);
            animation: iconBounce 2s infinite;
        }

        @keyframes iconBounce {

            0%,
            100% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.1);
            }
        }

        .modal-title {
            color: white;
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            line-height: 1.3;
            font-family: 'Inter', sans-serif;
        }

        .modal-subtitle {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
            font-weight: 400;
            margin-bottom: 1.5rem;
            font-family: 'Inter', sans-serif;
        }

        .countdown-display-modal {
            font-size: 2.5rem;
            font-weight: 800;
            color: rgb(7, 10, 243);
            margin-bottom: 1.5rem;
            text-shadow: 0 0 20px rgba(7, 10, 243, 0.8);
            animation: countdownBeat 1s infinite;
            font-family: 'Inter', sans-serif;
        }

        @keyframes countdownBeat {

            0%,
            100% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.2);
            }
        }

        .modal-button {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            border-radius: 10px;
            padding: 0.7rem 1.5rem;
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            font-family: 'Inter', sans-serif;
        }

        .modal-button:hover {
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(37, 99, 235, 0.15));
            border-color: rgba(59, 130, 246, 0.4);
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
        }

        .modal-button:active {
            transform: translateY(0);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        }

        .modal-button i {
            font-size: 0.9rem;
        }

        /* Modales de victoria y derrota - Pantalla completa para móvil */
        .game-result-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 3000;
            backdrop-filter: blur(8px);
        }

        .game-result-modal.victory {
            background: rgba(34, 197, 94, 0.75);
        }

        .game-result-modal.defeat {
            background: rgba(239, 68, 68, 0.75);
        }

        .game-result-content {
            padding: 2rem 1rem;
            width: 100%;
            height: 100vh;
            text-align: center;
            animation: resultSlideIn 0.5s ease-out;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background: transparent;
            gap: 2rem;
        }

        .game-result-content.victory,
        .game-result-content.defeat {
            background: transparent;
            color: #ffffff;
        }

        @keyframes resultSlideIn {
            from {
                opacity: 0;
                transform: scale(0.9);
            }

            to {
                opacity: 1;
                transform: scale(1);
            }
        }

        .result-title {
            font-size: 3rem;
            font-weight: 900;
            text-transform: uppercase;
            letter-spacing: 0.15em;
            font-family: 'Inter', sans-serif;
            text-shadow: 0 8px 30px rgba(0, 0, 0, 0.6);
            color: #ffffff;
            margin: 0;
        }

        .result-title.victory {
            color: #ffffff;
            animation: victoryPulse 2s infinite alternate;
        }

        .result-title.defeat {
            color: #ffffff;
            animation: defeatPulse 2s infinite alternate;
        }

        @keyframes victoryPulse {
            0% {
                transform: scale(1);
                text-shadow: 0 8px 30px rgba(0, 0, 0, 0.6);
            }

            100% {
                transform: scale(1.02);
                text-shadow: 0 12px 40px rgba(0, 0, 0, 0.8);
            }
        }

        @keyframes defeatPulse {
            0% {
                transform: scale(1);
                text-shadow: 0 8px 30px rgba(0, 0, 0, 0.6);
            }

            100% {
                transform: scale(1.02);
                text-shadow: 0 12px 40px rgba(0, 0, 0, 0.8);
            }
        }

        /* Animaciones adicionales para modales mejorados */
        @keyframes fadeInScale {
            0% {
                opacity: 0;
                transform: scale(0.8) translateY(20px);
            }

            100% {
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }

        @keyframes bounceIn {
            0% {
                opacity: 0;
                transform: scale(0.3);
            }

            50% {
                opacity: 1;
                transform: scale(1.05);
            }

            70% {
                transform: scale(0.9);
            }

            100% {
                opacity: 1;
                transform: scale(1);
            }
        }

        @keyframes sparkle {

            0%,
            100% {
                opacity: 0;
                transform: scale(0);
            }

            50% {
                opacity: 1;
                transform: scale(1);
            }
        }

        @keyframes floating {

            0%,
            100% {
                transform: translateY(0px);
            }

            50% {
                transform: translateY(-10px);
            }
        }

        /* Mejoras para modales en móvil */
        @media (max-width: 768px) {
            .game-result-modal .game-result-content {
                margin: 1rem;
                max-width: 90vw;
            }

            .result-title {
                font-size: 2.5rem !important;
            }

            .game-result-content div[style*="font-size: 1.2rem"] {
                font-size: 1rem !important;
            }
        }

        .result-button {
            background: rgba(0, 0, 0, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.8);
            color: white;
            border-radius: 50px;
            padding: 0.8rem 2rem;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            font-family: 'Inter', sans-serif;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        }

        .result-button:hover {
            background: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 1);
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
        }

        .result-button:active {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        }

        .result-button i {
            font-size: 1rem;
        }

        /* Responsive para móvil */
        @media (max-width: 480px) {
            .result-title {
                font-size: 2.5rem;
            }
        }

        /* Pantalla de cuenta regresiva */
        .countdown-screen {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            background: #000000;
            padding: 2rem;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 150;
        }

        .countdown-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 3rem;
        }

        .countdown-display {
            font-size: 6rem;
            font-weight: 900;
            color: rgb(7, 10, 243);
            text-shadow: 0 0 30px rgba(7, 10, 243, 0.5);
            animation: pulse 1s infinite;
        }

        .countdown-message {
            font-size: 1.5rem;
            color: white;
            text-align: center;
            font-weight: 600;
        }

        @media (max-width: 480px) {
            .countdown-display {
                font-size: 4rem;
            }

            .countdown-message {
                font-size: 1.2rem;
            }
        }

        /* Estilos para el modal de nombre de invitados - IDÉNTICO A PC */
        .guest-name-form {
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .name-input-group {
            display: flex;
            flex-direction: column;
            gap: 0.8rem;
        }

        .guest-name-input {
            width: 100%;
            padding: 0.8rem 1rem;
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1rem;
            font-family: 'Inter', sans-serif;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .guest-name-input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        .guest-name-input:focus {
            outline: none;
            border-color: rgb(7, 10, 243);
            box-shadow: 0 0 15px rgba(7, 10, 243, 0.3);
            background: rgba(255, 255, 255, 0.15);
        }

        .guest-join-button {
            margin-top: 0.5rem;
            background: linear-gradient(135deg, #22C55E 0%, #16A34A 100%);
            border-color: #22C55E;
        }

        .guest-join-button:hover:not(:disabled) {
            background: linear-gradient(135deg, #16A34A 0%, #15803D 100%);
            border-color: #16A34A;
            box-shadow: 0 4px 15px rgba(34, 197, 94, 0.4);
        }

        .guest-join-button:disabled {
            background: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.2);
            cursor: not-allowed;
            opacity: 0.6;
        }
    </style>
</head>


<div id="user-data" data-fullname="<%= user && user.fullname ? user.fullname.replace(/\" /g, '&quot;' ) : '' %>"
    data-profile-picture="<%= user && user.profilePicture ? user.profilePicture.replace(/\"/g, '&quot;' ) : '' %>"
        data-email="<%= user && user.email ? user.email.replace(/\"/g, '&quot;' ) : '' %>">
</div>

<body x-data="gameApp()">
    <!-- Variables globales de usuario para Alpine.js eliminadas, solo data-* attributes -->
    <!-- Loading overlay -->
    <!-- HEADER SUPERIOR SOLO ALPINE.JS, visible solo en playing -->
    <div x-show="gameState === 'playing'" class="game-header"
        style="position: fixed; top: 0; left: 0; right: 0; background: #000; padding: 4px 10px; display: flex; justify-content: space-between; align-items: center; z-index: 100; font-size: 12px; color: #fff; height: 44px; min-height: 44px;">
        <div
            style="display: flex; align-items: center; gap: 10px; font-size: 11.5px; white-space: nowrap; overflow-x: auto;">
            <span style="margin-right: 4px;">Sala: <strong style="color: #feca57; font-size: 12px;"
                    x-text="roomCode"></strong></span>
            <span style="margin-right: 4px;">Categoría: <strong
                    style="color: #feca57; font-size: 12px;">A1</strong></span>
            <span>Nivel: <strong style="color: #feca57; font-size: 12px;">1</strong></span>
        </div>
        <div style="display: flex; align-items: center; gap: 8px; position: relative;">
            <div class="user-menu-container" style="position: relative;">
                <button class="sidebar-footer-btn" @click="showUserMenu = !showUserMenu"
                    style="display: flex; align-items: center; gap: 5px; cursor: pointer; padding: 2px 4px; border-radius: 7px; background: transparent; border: none; color: white; min-height: 32px;">
                    <div class="user-avatar-game"
                        style="width: 28px; height: 28px; border-radius: 50%; background: #feca57; display: flex; align-items: center; justify-content: center; overflow: hidden;">
                        <template x-if="userProfilePicture && userProfilePicture.length > 0">
                            <img :src="userProfilePicture" :alt="userFullname"
                                style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">
                        </template>
                        <template x-if="!userProfilePicture || userProfilePicture.length === 0">
                            <span style="color: #000; font-weight: 700; font-size: 12px;" x-text="userInitials"></span>
                        </template>
                    </div>
                    <span
                        style="font-size: 11.5px; font-weight: 600; color: #fff; max-width: 70px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        x-text="userFullname && userFullname.length > 0 ? userFullname : 'Usuario'"></span>
                    <i class="fas fa-chevron-down" style="font-size: 10px; color: #fff;"></i>
                </button>
                <div class="game-user-dropdown" x-show="showUserMenu" x-transition
                    style="position: absolute; top: 100%; right: 0; background: #1a1a1a; border-radius: 8px; padding: 10px; min-width: 150px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 1000; margin-top: 4px;">
                    <div style="display: flex; align-items: center; margin-bottom: 6px;">
                        <div class="user-avatar-dropdown"
                            style="width: 28px; height: 28px; border-radius: 50%; background: #feca57; display: flex; align-items: center; justify-content: center; overflow: hidden;">
                            <template x-if="userProfilePicture && userProfilePicture.length > 0">
                                <img :src="userProfilePicture" :alt="userFullname"
                                    style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">
                            </template>
                            <template x-if="!userProfilePicture || userProfilePicture.length === 0">
                                <span style="color: #000; font-weight: 700; font-size: 12px;"
                                    x-text="userInitials"></span>
                            </template>
                        </div>
                        <div style="min-width: 0; margin-left: 6px;">
                            <div style="color: #fff; font-size: 11.5px; font-weight: 600;"
                                x-text="userFullname && userFullname.length > 0 ? userFullname : 'Usuario'"></div>
                            <div style="color: #999; font-size: 10px;" x-text="userEmail"></div>
                        </div>
                    </div>
                    <div style="border-top: 1px solid #333; margin: 6px 0;"></div>
                    <a href="/dashboard"
                        style="color: #fff; padding: 6px 0; display: flex; align-items: center; gap: 6px; font-size: 10.5px; text-decoration: none; transition: background 0.2s;">
                        <i class="fas fa-home"></i>
                        <span>Inicio</span>
                    </a>
                    <a href="/logout"
                        style="color: #fff; padding: 6px 0; display: flex; align-items: center; gap: 6px; font-size: 10.5px; text-decoration: none; transition: background 0.2s;">
                        <i class="fas fa-sign-out-alt"></i>
                        <span>Cerrar sesión</span>
                    </a>
                </div>
            </div>
        </div>
    </div>
    <div x-show="loading" class="loading-overlay">
        <div class="loading-spinner"></div>
    </div>

    <!-- SALA DE ESPERA MOBILE MEJORADA -->
    <template x-if="gameState === 'waiting'">
        <div class="waiting-screen"
            style="position: fixed; inset: 0; background: #000; z-index: 100; display: flex; flex-direction: column; align-items: center; justify-content: flex-start; min-height: 100vh; padding: 0;">
            <!-- Botón salir (X) -->
            <button @click="leaveGame()"
                style="position: absolute; top: 18px; right: 18px; background: rgba(255,255,255,0.08); border: none; border-radius: 50%; width: 38px; height: 38px; display: flex; align-items: center; justify-content: center; color: #fff; font-size: 1.3rem; z-index: 110;">
                <i class="fas fa-times"></i>
            </button>
            <!-- Logo -->
            <div class="waiting-logo" style="width: 140px; height: 80px; margin-top: 2.5rem; margin-bottom: 1.2rem;">
                <img src="/img/logo_formularios.svg" alt="Logo Formularios"
                    style="width: 100%; height: 100%; object-fit: contain;">
            </div>
            <!-- Código de sala -->
            <div class="room-code-display"
                style="background: rgba(255,255,255,0.08); border-radius: 16px; padding: 1rem 2rem; margin-bottom: 1.2rem; display: flex; align-items: center; gap: 1rem;">
                <span style="color: #073af3; font-size: 1.5rem; font-weight: 700; letter-spacing: 0.1em;"
                    x-text="roomCode"></span>
                <button class="copy-code-button" @click="copyRoomCode()" :class="{ 'copy-success': copySuccess }"
                    style="background: rgba(7,10,243,0.1); border: 2px solid #073af3; border-radius: 10px; color: #073af3; cursor: pointer; padding: 0.5rem; font-size: 1.1rem; min-width: 36px; height: 36px; display: flex; align-items: center; justify-content: center;">
                    <span
                        style="display: flex; align-items: center; justify-content: center; width: 100%; height: 100%;">
                        <i class="fas fa-copy" x-show="!copySuccess"></i>
                        <i class="fas fa-check" x-show="copySuccess"></i>
                    </span>
                </button>
            </div>
            <!-- Lista de jugadores en forma de lista vertical -->
            <div class="players-list"
                style="width: 100%; max-width: 340px; background: rgba(255,255,255,0.04); border-radius: 14px; padding: 1rem 0.5rem 0.5rem 0.5rem; margin-bottom: 1.2rem; min-height: 220px;">
                <template x-for="(player, idx) in Object.values(players)" :key="player.id || idx">
                    <div class="player-list-item"
                        style="display: flex; align-items: center; gap: 0.8rem; padding: 0.6rem 0.7rem; border-radius: 8px; margin-bottom: 0.3rem; background: rgba(255,255,255,0.07);">
                        <div class="player-avatar-circle"
                            style="width: 38px; height: 38px; border-radius: 50%; background: rgba(255,255,255,0.13); display: flex; align-items: center; justify-content: center; overflow: hidden;">
                            <template x-if="player.avatar">
                                <img :src="player.avatar" :alt="player.name"
                                    style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">
                            </template>
                            <template x-if="!player.avatar">
                                <span class="avatar-initials"
                                    x-text="player.name.split(' ').map(n => n[0]).join('').substring(0, 2).toUpperCase()"
                                    style="color: white; font-size: 1.1rem; font-weight: 700;"></span>
                            </template>
                        </div>
                        <div class="player-list-info" style="flex: 1; display: flex; flex-direction: column;">
                            <span class="player-list-name" x-text="player.name"
                                style="color: #fff; font-size: 1rem; font-weight: 600;"></span>
                        </div>
                        <span class="player-list-status"
                            style="color: #6fffa7; font-size: 1.1rem; font-weight: 700;">●</span>
                    </div>
                </template>
                <!-- Espacios vacíos -->
                <template x-for="i in 5 - Object.keys(players).length" :key="'empty-' + i">
                    <div class="player-list-item empty"
                        style="display: flex; align-items: center; gap: 0.8rem; padding: 0.6rem 0.7rem; border-radius: 8px; margin-bottom: 0.3rem; background: rgba(255,255,255,0.03); opacity: 0.5;">
                        <div class="player-avatar-circle"
                            style="width: 38px; height: 38px; border-radius: 50%; background: rgba(255,255,255,0.08); display: flex; align-items: center; justify-content: center;">
                            <span class="question-mark"
                                style="color: rgba(255,255,255,0.6); font-size: 1.3rem; font-weight: 300;">?</span>
                        </div>
                        <div class="player-list-info" style="flex: 1; display: flex; flex-direction: column;">
                            <span class="player-list-name"
                                style="color: #fff; font-size: 1rem; font-weight: 600;">Esperando...</span>
                        </div>
                    </div>
                </template>
            </div>
            <!-- Botón Iniciar Partida (solo host) -->
            <button class="start-game-button" @click="startGame()" x-show="isHost && Object.keys(players).length >= 1"
                :disabled="Object.keys(players).length < 1"
                style="background: #22c55e; color: white; border: none; border-radius: 8px; padding: 0.7rem 1.5rem; font-size: 1rem; font-weight: 600; margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem; transition: all 0.3s ease;"
                onmouseover="this.style.background='#16a34a'" onmouseout="this.style.background='#22c55e'">
                <i class="fas fa-play"></i> Iniciar Partida (<span x-text="Object.keys(players).length"></span>/5)
            </button>
            <!-- Contador de jugadores -->
            <div class="player-counter" style="color: #fff; font-size: 0.95rem; margin-bottom: 0.5rem;">
                <div class="counter-main"><span x-text="Object.keys(players).length"></span> / 5 jugadores conectados
                </div>
                <div class="counter-waiting" x-show="Object.keys(players).length < 5">Esperando <span
                        x-text="5 - Object.keys(players).length"></span> jugadores más</div>
                <div class="counter-ready" x-show="Object.keys(players).length === 5">¡Sala completa! Lista para empezar
                </div>
            </div>
            <!-- Modal: ¿Seguro que quieres salir? -->
            <!-- Modal de salir eliminado para mobile, salida directa -->
            <!-- Modal: El host ha abandonado la sala -->
            <div x-show="showHostLeftModal || showHostDisconnectedModal"
                x-transition:enter="transition ease-out duration-300" x-transition:enter-start="opacity-0"
                x-transition:enter-end="opacity-100" x-transition:leave="transition ease-in duration-200"
                x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0"
                class="host-disconnection-modal">
                <div class="modal-content">
                    <div class="modal-icon">
                        <i class="fas fa-user-times"></i>
                    </div>
                    <div class="modal-title">El creador de la partida se ha desconectado</div>
                    <div class="modal-subtitle">Serás redirigido al inicio</div>
                    <div class="countdown-display-modal" x-text="hostDisconnectedCountdown"></div>
                    <button class="modal-button" @click="goToDashboardFromModal()">
                        <i class="fas fa-arrow-left"></i>
                        Volver al dashboard
                    </button>
                </div>
            </div>
            <!-- Modal: Partida ya iniciada -->
            <div x-show="showGameAlreadyStartedModal" x-transition:enter="transition ease-out duration-300"
                x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100"
                x-transition:leave="transition ease-in duration-200" x-transition:leave-start="opacity-100"
                x-transition:leave-end="opacity-0" class="host-disconnection-modal">
                <div class="modal-content">
                    <div class="modal-icon">
                        <i class="fas fa-lock"></i>
                    </div>
                    <div class="modal-title">Esta partida ya ha iniciado</div>
                    <div class="modal-subtitle">No es posible unirse a una partida en curso</div>
                    <div class="countdown-display-modal" x-text="gameAlreadyStartedCountdown"></div>
                    <button class="modal-button" @click="goToDashboardFromGameStarted()">
                        <i class="fas fa-arrow-left"></i>
                        Volver al dashboard
                    </button>
                </div>
            </div>
        </div>
    </template>

    <!-- PANTALLA DE CUENTA REGRESIVA -->
    <template x-if="gameState === 'starting'">
        <div class="countdown-screen">
            <div class="countdown-container">
                <div class="waiting-logo" style="width: 140px; height: 80px; margin-bottom: 1rem;">
                    <img src="/img/logo_formularios.svg" alt="Logo Formularios"
                        style="width: 100%; height: 100%; object-fit: contain;">
                </div>
                <div class="countdown-display">
                    <span x-text="countdown > 0 ? countdown : '¡Comenzamos!'"></span>
                </div>
                <div class="countdown-message">
                    <span x-show="countdown > 0">La partida comenzará en...</span>
                    <span x-show="countdown <= 0">¡Preparate!</span>
                </div>
            </div>
        </div>
    </template>

    <!-- CONTENEDOR PRINCIPAL DEL JUEGO (PC) COPIADO PARA ADAPTAR EN MOBILE -->
    <template x-if="gameState === 'playing'">
        <div class="game-mobile-vertical d-flex flex-column align-items-center w-100 px-0"
            style="min-height: 100vh; background: #000; font-family: 'Inter', sans-serif; margin-top: 44px;">
            <div class="d-flex flex-row align-items-start justify-content-start w-100 px-2 pt-3 pb-2"
                style="max-width: 100vw; align-items: flex-start;">
                <!-- Solo la carta actual, barra de tiempo y cantidad de cartas salidas -->
                <div class="d-flex flex-column align-items-center justify-content-start flex-fill"
                    style="width: 60%; min-width: 0; padding: 0; border-radius: 0; box-shadow: none; background: transparent;">
                    <!-- Espaciador para alinear la carta con el título 'Jugadores' -->
                    <div style="height: 1.2em;"></div>
                    <!-- Carta actual sin ningún fondo ni contenedor -->
                    <template x-if="currentCard">
                        <img :src="currentCard.img || ('/img/partida/' + currentCard.filename)" :alt="currentCard.name"
                            :class="{ 'changing': isChangingCard, 'appearing': isAppearingCard }"
                            class="current-card-pure"
                            style="width: min(30vw, 110px); height: auto; aspect-ratio: 140/190; display: block; border-radius: 10px; box-shadow: 0 1vw 3vw rgba(0,0,0,0.13); max-width: 90vw; background: transparent; margin-bottom: 8px; transition: all 0.6s ease;" />
                    </template>
                    <template x-if="!currentCard">
                        <div
                            style="width: min(30vw, 110px); height: auto; aspect-ratio: 140/190; display: flex; align-items: center; justify-content: center; border-radius: 10px; box-shadow: 0 1vw 3vw rgba(0,0,0,0.13); max-width: 90vw; background: #333; margin-bottom: 8px; color: #666; font-size: 12px;">
                            Esperando...
                        </div>
                    </template>
                    <!-- Barra de tiempo más corta -->
                    <div
                        style="width: 70%; max-width: 120px; height: 9px; background: #222; border-radius: 5px; overflow: hidden; margin-bottom: 7px;">
                        <div
                            :style="'width: ' + Math.max(0, Math.min(100, (timeLeft/5)*100)) + '%; height: 100%; background: linear-gradient(90deg, #22c55e, #073af3); transition: width 0.3s;'">
                        </div>
                    </div>
                    <!-- Cantidad de cartas salidas -->
                    <div class="text-white"
                        style="font-size: clamp(12px, 3vw, 15px); font-weight: 600; margin-bottom: 2px;">
                        Cartas salidas: <span x-text="currentCardIndex + 1"></span>/54
                    </div>
                </div>
                <!-- Columna jugadores (derecha) -->
                <div class="players-list-mini d-flex flex-column align-items-start justify-content-start flex-fill"
                    style="width: 40%; min-width: 0; gap: 1.5vw;">
                    <span class="text-white fw-bold mb-1"
                        style="font-size: clamp(11px, 2.5vw, 15px); letter-spacing: 0.08em;">Jugadores</span>
                    <template x-for="(player, idx) in Object.values(players)" :key="player.id || idx">
                        <div class="d-flex align-items-center mb-1" style="gap: 2vw;">
                            <div class="bg-white border border-2 border-white shadow d-flex align-items-center justify-content-center"
                                style="width: clamp(28px, 7vw, 40px); height: clamp(28px, 7vw, 40px); border-radius: 50%; overflow: hidden;">
                                <template x-if="player.avatar">
                                    <img :src="player.avatar" :alt="player.name"
                                        style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">
                                </template>
                                <template x-if="!player.avatar">
                                    <span style="color: #073af3; font-size: clamp(13px, 3vw, 18px); font-weight: 700;"
                                        x-text="getInitials(player.name)"></span>
                                </template>
                            </div>
                            <div class="d-flex flex-column align-items-start" style="min-width: 0;">
                                <span class="text-white fw-bold"
                                    style="font-size: clamp(11px, 2.5vw, 15px); max-width: 30vw; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                    x-text="player.name"></span>
                                <span class="text-white"
                                    style="font-size: clamp(10px, 2vw, 13px); font-weight: 400; opacity: 0.7;"
                                    x-text="(player.selectedCards !== undefined ? player.selectedCards : 0) + '/16'"></span>
                            </div>
                        </div>
                    </template>
                </div>
            </div>
            <!-- Cartilla centrada debajo de carta y jugadores -->
            <div class="w-100 d-flex justify-content-center mt-2 mb-2">
                <div class="cartilla-container"
                    style="background: #fff; border-radius: 2.8vw; box-shadow: 0 2vw 6vw rgba(0,0,0,0.08); padding: clamp(10px, 3vw, 22px); width: min(88vw, 350px); margin: 0 auto;">
                    <div class="cartilla-grid"
                        style="display: grid; grid-template-columns: repeat(4, 1fr); gap: clamp(7px, 2vw, 16px);">
                        <template x-for="(card, index) in playerCards" :key="index">
                            <div class="cartilla-card" :class="{
                                     'selected': card.selected,
                                     'selectable': currentCard && card.number === currentCard.number && !card.selected,
                                     'pulse': card.pulse
                                 }" @click="selectCard(index)"
                                style="background: #f8fafc; border-radius: 1.8vw; box-shadow: 0 1vw 3vw rgba(0,0,0,0.07); border: 1.6px solid #e5e7eb; aspect-ratio: 140/190; width: 100%; max-width: 100%; cursor: pointer; transition: all 0.2s ease; display: flex; align-items: center; justify-content: center;">
                                <img :src="'/img/partida/' + card.filename" :alt="card.name"
                                    style="width: 80%; height: 80%; object-fit: contain; border-radius: 0.9vw;" />
                                <!-- Overlay para cartas seleccionadas -->
                                <div x-show="card.selected" class="mobile-card-overlay"
                                    style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(34, 197, 94, 0.8); display: flex; align-items: center; justify-content: center; color: white; font-size: clamp(12px, 3vw, 16px); border-radius: 1.8vw;">
                                    <i class="fas fa-check"></i>
                                </div>
                            </div>
                        </template>
                    </div>
                </div>
            </div>
        </div>
    </template>

    <!-- Cartilla ya está incluida dentro del contenedor principal del juego en mobile -->

    <!-- Estados del juego -->
    <div class="game-status" :class="gameStatus.show ? 'show' : ''"
        style="padding: clamp(9.6px, 3.2vw, 25.6px); border-radius: 2.4vw; max-width: 76vw;">
        <div class="status-title" x-text="gameStatus.title" style="font-size: clamp(14.4px, 4vw, 22.4px);"></div>
        <div class="status-message" x-text="gameStatus.message" style="font-size: clamp(11.2px, 3.2vw, 16px);"></div>
        <template x-if="gameStatus.showButton">
            <button class="btn-status" @click="handleStatusAction()" x-text="gameStatus.buttonText"
                style="font-size: clamp(11.2px, 3.2vw, 16px); padding: clamp(6.4px, 1.6vw, 12.8px) clamp(14.4px, 4vw, 28.8px);"></button>
        </template>
    </div>

    <!-- MODAL DE NOMBRE PARA INVITADOS - DISEÑO IDÉNTICO A PC -->
    <div x-show="showGuestNameModal" x-cloak x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-200" x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0" class="host-disconnection-modal">

        <div class="modal-content">
            <div class="modal-icon">
                <i class="fas fa-user-plus"></i>
            </div>
            <div class="modal-title">¡Bienvenido a la partida!</div>
            <div class="modal-subtitle">Ingresa tu nombre para unirte</div>

            <form @submit.prevent="submitGuestName()" class="guest-name-form">
                <div class="name-input-group">
                    <input type="text" x-model="guestFirstName" placeholder="Nombre" class="guest-name-input"
                        maxlength="20" required>
                    <input type="text" x-model="guestLastName" placeholder="Apellido" class="guest-name-input"
                        maxlength="20" required>
                </div>
                <button type="submit" class="modal-button guest-join-button"
                    :disabled="!guestFirstName.trim() || !guestLastName.trim()">
                    <i class="fas fa-sign-in-alt"></i>
                    Unirse a la partida
                </button>
            </form>
        </div>
    </div>

    <!-- MODALES DE RESULTADO DEL JUEGO - FUERA DE TEMPLATES PARA QUE ESTÉN SIEMPRE DISPONIBLES -->
    <!-- Modal de Victoria -->
    <div x-show="showVictoryModal === true" x-cloak x-transition:enter="transition ease-out duration-500"
        x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-300" x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0" class="game-result-modal victory">
        <div class="game-result-content victory">
            <div class="result-title victory">YOU WON!</div>
            <button class="result-button" @click="goToDashboardFromResult()">
                <i class="fas fa-home"></i>
                INICIO
            </button>
        </div>
    </div>

    <!-- Modal de Derrota -->
    <div x-show="showDefeatModal === true" x-cloak x-transition:enter="transition ease-out duration-500"
        x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-300" x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0" class="game-result-modal defeat">
        <div class="game-result-content defeat">
            <div class="result-title defeat">GAME OVER</div>
            <button class="result-button" @click="goToDashboardFromResult()">
                <i class="fas fa-home"></i>
                INICIO
            </button>
        </div>
    </div>

    <script>


        function gameApp() {
            return {
                loading: true,
                gameState: 'waiting', // waiting, starting, playing, ended
                roomCode: '<%- roomCode %>',
                players: {},
                isHost: false,
                playerCards: [],
                currentCard: null,
                currentCardIndex: 0,
                selectedCards: 0,
                muted: false,
                showUserMenu: false,
                countdown: 0,
                timeLeft: 5,
                timePercentage: 100,
                timeInterval: null,
                gameEnded: false,
                showVictoryModal: false,
                showDefeatModal: false,
                winner: null,
                gameResultsReady: false,
                gameFullyInitialized: false,
                copySuccess: false,
                hostDisconnectedCountdown: 10,
                hostDisconnectedTimer: null,
                showHostDisconnectedModal: false,
                showHostLeftModal: false,
                gameAlreadyStartedCountdown: 10,
                gameAlreadyStartedTimer: null,
                showGameAlreadyStartedModal: false,

                // Variable gameStatus que falta
                gameStatus: {
                    show: false,
                    title: '',
                    message: '',
                    showButton: false,
                    buttonText: ''
                },

                // Usuario data desde el HTML data-*
                userFullname: '',
                userEmail: '',
                userProfilePicture: '',
                userInitials: '',

                // Variables para sistema de invitados
                showGuestNameModal: false,
                guestFirstName: '',
                guestLastName: '',
                isGuest: false,
                currentUser: {
                    name: '',
                    email: '',
                    avatar: null
                },

                // Variables de temporizadores
                socket: null,
                timer: null,
                isChangingCard: false,
                isAppearingCard: false,
                countdownTimer: null,
                cardTimer: null,

                init() {
                    // Inicializar Text-to-Speech
                    this.initializeTTS();

                    // Cargar información del usuario actual desde la sesión
                    this.loadCurrentUser();

                    setTimeout(() => this.loading = false, 500);
                },

                loadCurrentUser() {
                    // Cargar información del usuario desde el backend
                    fetch('/api/current-user')
                        .then(response => {
                            if (response.ok) {
                                return response.json();
                            }
                            throw new Error('Error en la respuesta del servidor');
                        })
                        .then(userData => {
                            console.log('Datos del usuario recibidos (móvil):', userData);

                            // Verificar si es un usuario registrado o invitado
                            if (!userData.isGuest && userData.fullname && userData.fullname !== 'Usuario Anónimo' && userData.fullname !== 'Invitado') {
                                // Usuario registrado - conectar directamente
                                this.currentUser = {
                                    name: userData.fullname,
                                    email: userData.email || '',
                                    avatar: userData.profilePicture || null
                                };
                                this.isGuest = false;

                                // También actualizar las variables de usuario para compatibilidad
                                this.userFullname = userData.fullname;
                                this.userEmail = userData.email || '';
                                this.userProfilePicture = userData.profilePicture || '';
                                this.userInitials = this.getInitials(userData.fullname);

                                console.log('Usuario registrado conectado:', this.currentUser);
                                this.connectToRoom();
                            } else {
                                // Usuario invitado - mostrar modal de nombre
                                this.isGuest = true;
                                this.showGuestNameModal = true;
                                console.log('Invitado detectado - mostrando modal de nombre');
                            }
                        })
                        .catch(err => {
                            console.error('Error loading user data:', err);
                            // Si hay error, tratar como invitado
                            this.isGuest = true;
                            this.showGuestNameModal = true;
                            console.log('Error al cargar usuario - tratando como invitado');
                        });
                },

                connectToRoom() {
                    // Inicializar socket y conectar al juego
                    this.initSocket();
                },

                submitGuestName() {
                    // Validar que ambos campos estén llenos
                    if (!this.guestFirstName.trim() || !this.guestLastName.trim()) {
                        alert('Por favor completa ambos campos');
                        return;
                    }

                    // Crear el nombre completo del invitado
                    const fullName = `${this.guestFirstName.trim()} ${this.guestLastName.trim()}`;

                    this.currentUser = {
                        name: fullName,
                        email: '',
                        avatar: null
                    };

                    // También actualizar las variables de usuario para compatibilidad
                    this.userFullname = fullName;
                    this.userEmail = '';
                    this.userProfilePicture = '';
                    this.userInitials = this.getInitials(fullName);

                    // Cerrar el modal
                    this.showGuestNameModal = false;

                    console.log('Invitado configurado:', this.currentUser);

                    // Conectar al room con los datos del invitado
                    this.connectToRoom();
                },

                closeGuestModal() {
                    // Cerrar modal sin conectar (volver a dashboard)
                    window.location.href = '/dashboard';
                },

                initSocket() {
                    console.log('Inicializando socket...');
                    this.socket = io();

                    // Manejo de conexión inicial
                    this.socket.on('connect', () => {
                        console.log('Socket conectado:', this.socket.id);
                        if (this.roomCode) {
                            console.log('Uniéndose a la sala:', this.roomCode);

                            // Enviar datos del usuario junto con el room code
                            const userData = {
                                roomCode: this.roomCode,
                                user: this.currentUser
                            };

                            console.log('Datos del usuario enviados (móvil):', userData);
                            this.socket.emit('join-room', userData);
                        }
                    });

                    // Estado inicial de la sala
                    this.socket.on('room-state', (data) => {
                        console.log('Estado de la sala recibido:', data);
                        this.players = data.players || {};
                        this.isHost = data.isHost || false;
                        this.playerCards = data.playerCards || [];
                        this.currentCard = data.currentCard || null;
                        this.currentCardIndex = data.currentCardIndex || 0;
                        this.gameState = data.gameState || 'waiting';

                        if (data.gameState === 'playing') {
                            this.updateSelectedCards();
                            if (data.timeLeft) {
                                this.timeLeft = data.timeLeft;
                                this.startTimer();
                            }
                        }

                        this.$nextTick(() => {
                            console.log('Vista de sala actualizada');
                        });
                    });

                    // Actualizaciones de jugadores
                    this.socket.on('players-updated', (data) => {
                        console.log('Jugadores actualizados:', data);
                        this.players = data.players || {};

                        this.$nextTick(() => {
                            console.log('Vista de jugadores actualizada');
                        });
                    });

                    // Manejo de desconexiones
                    this.socket.on('player-disconnected', (playerId) => {
                        console.log('Jugador desconectado:', playerId);
                        if (this.players[playerId]) {
                            this.players[playerId].connected = false;

                            if (this.gameState === 'waiting') {
                                delete this.players[playerId];
                            }

                            this.$nextTick();
                        }
                    });

                    // Inicio de partida
                    this.socket.on('game-started', (data) => {
                        console.log('Juego iniciado:', data);
                        this.gameState = 'playing';

                        // Si no tenemos cartas precargadas, cargarlas ahora
                        if (!this.playerCards || this.playerCards.length === 0) {
                            console.log('⚠️ Cartas no precargadas, cargando ahora...');
                            this.playerCards = data.playerCards;
                            this.preloadCardImages(); // Cargar de forma asíncrona
                        } else {
                            console.log('✅ Usando cartas ya precargadas');
                        }

                        // Configurar carta actual si no está precargada
                        if (!this.currentCard && data.currentCard) {
                            this.currentCard = data.currentCard;
                            // Reproducir voz de la primera carta usando TTS
                            this.speakCardName(data.currentCard);
                        }

                        this.currentCardIndex = data.index || 0;
                        this.updateSelectedCards();

                        if (data.currentCard && data.timeLeft) {
                            this.timeLeft = data.timeLeft;
                            this.startTimer();
                        }
                    });

                    // Nueva carta
                    this.socket.on('new-card', (data) => {
                        console.log('Nueva carta:', data);
                        this.showNewCard(data.card, data.index);

                        if (!this.muted) {
                            this.playCardSound();
                        }
                    });

                    // Sincronización de temporizador
                    this.socket.on('time-update', (data) => {
                        this.timeLeft = data.timeLeft;
                    });

                    // Cuenta regresiva
                    this.socket.on('countdown-start', (data) => {
                        console.log('Cuenta regresiva iniciada:', data);
                        this.countdown = data.count;
                        this.gameState = 'starting';

                        // PRECARGA DE CARTILLAS DURANTE EL CONTEO REGRESIVO
                        if (data.playerCards && data.playerCards.length > 0) {
                            console.log('🎴 Precargando cartilla durante conteo regresivo...');
                            this.playerCards = data.playerCards;
                            this.preloadCardImages();
                            this.updateSelectedCards();
                        }

                        // También precargar la primera carta si está disponible
                        if (data.currentCard) {
                            console.log('🃏 Precargando carta actual...');
                            this.currentCard = data.currentCard;
                            this.currentCardIndex = data.index || 0;
                        }
                    });

                    this.socket.on('countdown-update', (count) => {
                        console.log('Cuenta regresiva:', count);
                        this.countdown = count;
                        if (count <= 0) {
                            this.countdown = 0;
                        }
                    });

                    // Actualización de jugador
                    this.socket.on('player-updated', (data) => {
                        console.log('Jugador actualizado:', data);
                        if (this.players[data.playerId]) {
                            this.players[data.playerId].selectedCards = data.selectedCards;
                        }
                    });

                    // Fin de partida
                    this.socket.on('game-ended', (data) => {
                        console.log('🔥🔥🔥 EVENTO GAME-ENDED RECIBIDO 🔥🔥🔥');
                        console.log('Juego terminado:', data);
                        console.log('Winner ID:', data.winner);
                        console.log('Current Player ID:', this.socket.id);
                        console.log('¿El usuario actual ganó?:', data.winner === this.socket.id);
                        this.handleGameEnd(data);
                    });

                    this.socket.on('game-finished', (data) => {
                        console.log('🔥🔥🔥 EVENTO GAME-FINISHED RECIBIDO 🔥🔥🔥');
                        console.log('Juego terminado:', data);
                        console.log('Winner ID:', data.winner);
                        console.log('Current Player ID:', this.socket.id);
                        console.log('¿El usuario actual ganó?:', data.winner === this.socket.id);
                        this.handleGameEnd(data);
                    });

                    // Host abandonó
                    this.socket.on('host-left', (data) => {
                        console.log('Host abandonó la partida:', data);
                        if (document.fullscreenElement) {
                            this.exitFullscreen();
                        }
                        this.showHostLeftModal = true;
                        this.startHostDisconnectedCountdown();
                    });

                    // Host desconectado
                    this.socket.on('host-disconnected', (data) => {
                        console.log('Host desconectado:', data);
                        this.showHostDisconnectedModal = true;
                        this.startHostDisconnectedCountdown();
                    });

                    // Partida ya iniciada
                    this.socket.on('game-already-started', () => {
                        console.log('La partida ya ha comenzado');
                        this.showGameAlreadyStartedModal = true;
                        this.startGameAlreadyStartedCountdown();
                    });

                    // Error de conexión
                    this.socket.on('error', (error) => {
                        console.error('Error de socket:', error);
                    });

                    // Desconexión
                    this.socket.on('disconnect', (reason) => {
                        console.log('Socket desconectado:', reason);
                    });
                },

                // Funciones de juego
                startGame() {
                    if (!this.isHost) {
                        console.log('Solo el host puede iniciar la partida');
                        return;
                    }

                    if (Object.keys(this.players).length < 1) {
                        console.log('No hay suficientes jugadores');
                        return;
                    }

                    console.log('Iniciando partida...');
                    this.socket.emit('start-game');
                },

                selectCard(index) {
                    if (!this.currentCard || this.gameEnded) {
                        return;
                    }

                    const card = this.playerCards[index];
                    if (!card) return;

                    // Solo seleccionar si la carta actual coincide y no está ya seleccionada
                    if (card.number === this.currentCard.number && !card.selected) {
                        card.selected = true;
                        this.updateSelectedCards();

                        // Añadir efecto visual igual que en PC
                        const cardElement = document.querySelectorAll('.cartilla-card')[index];
                        if (cardElement) {
                            cardElement.classList.add('pulse');
                            setTimeout(() => {
                                cardElement.classList.remove('pulse');
                            }, 600);
                        }

                        // Emitir al servidor
                        this.socket.emit('card-selected', {
                            cardIndex: index,
                            selectedCards: this.selectedCards
                        });

                        if (!this.muted) {
                            this.playSelectSound();
                        }

                        // Verificar victoria automática (igual que en PC)
                        if (this.selectedCards === 16) {
                            this.socket.emit('player-won');
                        }
                    }
                },

                updateSelectedCards() {
                    this.selectedCards = this.playerCards.filter(card => card.selected).length;
                },

                // FUNCIÓN PARA PRECARGAR IMÁGENES DE LAS CARTAS
                async preloadCardImages() {
                    console.log('🎴 Iniciando precarga de imágenes...');
                    const imagePromises = [];

                    // Precargar todas las cartas de la cartilla
                    this.playerCards.forEach((card, index) => {
                        const imgPromise = new Promise((resolve, reject) => {
                            const img = new Image();
                            img.onload = () => {
                                console.log(`✅ Carta ${index + 1} precargada: ${card.filename}`);
                                resolve(img);
                            };
                            img.onerror = () => {
                                console.warn(`⚠️ Error precargando carta ${index + 1}: ${card.filename}`);
                                resolve(null); // No fallar por una imagen
                            };
                            img.src = `/img/partida/${card.filename}`;
                        });
                        imagePromises.push(imgPromise);
                    });

                    // Precargar la carta actual si existe
                    if (this.currentCard) {
                        const currentCardPromise = new Promise((resolve, reject) => {
                            const img = new Image();
                            img.onload = () => {
                                console.log(`✅ Carta actual precargada: ${this.currentCard.filename}`);
                                resolve(img);
                            };
                            img.onerror = () => {
                                console.warn(`⚠️ Error precargando carta actual: ${this.currentCard.filename}`);
                                resolve(null);
                            };
                            img.src = this.currentCard.img || `/img/partida/${this.currentCard.filename}`;
                        });
                        imagePromises.push(currentCardPromise);
                    }

                    try {
                        await Promise.all(imagePromises);
                        console.log('🎉 Todas las cartas han sido precargadas exitosamente');
                    } catch (error) {
                        console.error('❌ Error en la precarga de cartas:', error);
                    }
                },

                showNewCard(card, index) {
                    this.isChangingCard = true;
                    this.stopTimer();

                    setTimeout(() => {
                        this.currentCard = card;
                        this.currentCardIndex = index;
                        this.isChangingCard = false;
                        this.isAppearingCard = true;

                        // Reproducir voz de la carta usando TTS
                        this.speakCardName(card);

                        this.timeLeft = 5;
                        this.startTimer();

                        setTimeout(() => {
                            this.isAppearingCard = false;
                        }, 500);
                    }, 250);
                },

                startTimer() {
                    this.stopTimer();
                    this.timer = setInterval(() => {
                        this.timeLeft--;
                        if (this.timeLeft <= 0) {
                            this.stopTimer();
                        }
                    }, 1000);
                },

                stopTimer() {
                    if (this.timer) {
                        clearInterval(this.timer);
                        this.timer = null;
                    }
                },

                // Función para reproducir el nombre de la carta con TTS
                speakCardName(card) {
                    if (!this.muted && 'speechSynthesis' in window) {
                        try {
                            // Cancelar cualquier síntesis previa
                            speechSynthesis.cancel();

                            const utterance = new SpeechSynthesisUtterance();

                            // Usar el nombre en inglés si está disponible, sino usar el nombre regular
                            const textToSpeak = card.englishName || card.name || `Card ${card.number}`;
                            utterance.text = textToSpeak;

                            // Configuración de voz
                            utterance.lang = 'en-US'; // Inglés americano
                            utterance.rate = 0.8; // Velocidad un poco más lenta
                            utterance.pitch = 1.0; // Tono normal
                            utterance.volume = 0.8; // Volumen al 80%

                            // Intentar usar una voz específica de Google si está disponible
                            const voices = speechSynthesis.getVoices();
                            const googleVoice = voices.find(voice =>
                                voice.name.includes('Google') && voice.lang.startsWith('en')
                            );
                            const femaleVoice = voices.find(voice =>
                                voice.lang.startsWith('en') && voice.name.toLowerCase().includes('female')
                            );
                            const maleVoice = voices.find(voice =>
                                voice.lang.startsWith('en') && voice.name.toLowerCase().includes('male')
                            );

                            // Prioridad: Google > Female > Male > Primera disponible
                            utterance.voice = googleVoice || femaleVoice || maleVoice || voices.find(voice => voice.lang.startsWith('en'));

                            console.log(`🎵 Pronunciando: "${textToSpeak}" con voz: ${utterance.voice?.name || 'Default'}`);

                            // Reproducir
                            speechSynthesis.speak(utterance);

                        } catch (error) {
                            console.error('Error con Text-to-Speech:', error);
                        }
                    }
                },

                // Función para inicializar las voces de TTS
                initializeTTS() {
                    if ('speechSynthesis' in window) {
                        // Cargar las voces disponibles
                        const loadVoices = () => {
                            const voices = speechSynthesis.getVoices();
                            console.log('🎵 Voces TTS disponibles:', voices.length);
                            voices.forEach(voice => {
                                if (voice.lang.startsWith('en')) {
                                    console.log(`  - ${voice.name} (${voice.lang})`);
                                }
                            });
                        };

                        // Las voces pueden no estar disponibles inmediatamente
                        if (speechSynthesis.getVoices().length > 0) {
                            loadVoices();
                        } else {
                            speechSynthesis.addEventListener('voiceschanged', loadVoices);
                        }
                    } else {
                        console.warn('⚠️ Text-to-Speech no soportado en este navegador');
                    }
                },

                toggleMute() {
                    this.muted = !this.muted;
                },

                callLoteria() {
                    if (this.selectedCards >= 4 && this.gameState === 'playing' && !this.gameEnded) {
                        console.log('¡LOTERÍA! Jugador ha ganado con', this.selectedCards, 'cartas seleccionadas');
                        this.socket.emit('player-won', {
                            roomCode: this.roomCode,
                            selectedCards: this.selectedCards
                        });

                        if (!this.muted) {
                            this.playWinSound();
                        }
                    }
                },

                toggleFullscreen() {
                    if (!document.fullscreenElement) {
                        this.enterFullscreen();
                    } else {
                        this.exitFullscreen();
                    }
                },

                enterFullscreen() {
                    if (!document.fullscreenElement) {
                        document.documentElement.requestFullscreen().catch(err => {
                            console.log('Error al entrar en pantalla completa:', err);
                        });
                    }
                },

                exitFullscreen() {
                    if (document.fullscreenElement) {
                        document.exitFullscreen().catch(err => {
                            console.log('Error al salir de pantalla completa:', err);
                        });
                    }
                },

                // Navegación
                leaveGame() {
                    if (document.fullscreenElement) {
                        this.exitFullscreen();
                    }

                    const gameCode = localStorage.getItem('gameCode');
                    if (gameCode) {
                        fetch('/api/game-rooms/leave-room', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ code: gameCode })
                        })
                            .then(() => {
                                this.cleanupGameData();
                            })
                            .catch(error => {
                                console.error('Error al abandonar sala:', error);
                                this.cleanupGameData();
                            })
                            .finally(() => {
                                window.location.href = '/dashboard';
                            });
                    } else {
                        this.cleanupGameData();
                        window.location.href = '/dashboard';
                    }
                },

                goHome() {
                    this.showUserMenu = false;

                    if (document.fullscreenElement) {
                        this.exitFullscreen();
                    }

                    this.cleanupGameData();

                    if (this.isHost) {
                        this.socket.emit('host-abandon-game');
                    } else {
                        this.socket.emit('leave-game');
                    }

                    window.location.href = '/dashboard';
                },

                logout() {
                    this.showUserMenu = false;

                    if (document.fullscreenElement) {
                        this.exitFullscreen();
                    }

                    this.cleanupGameData();

                    if (this.isHost) {
                        this.socket.emit('host-abandon-game');
                    } else {
                        this.socket.emit('leave-game');
                    }

                    setTimeout(() => {
                        window.location.href = '/logout';
                    }, 100);
                },

                // Gestión de modales
                handleGameEnd(data) {
                    console.log('🎯 Manejando fin de juego:', data);
                    this.gameEnded = true;
                    this.winner = data.winner;
                    this.gameResultsReady = true;

                    const currentPlayerId = this.socket.id;
                    console.log('🆔 Winner ID:', data.winner);
                    console.log('🆔 Current Player ID:', currentPlayerId);

                    setTimeout(() => {
                        // Si hay un ganador específico y es el jugador actual
                        if (data.winner && data.winner === currentPlayerId) {
                            console.log('🏆 Mostrando modal de victoria');
                            this.showVictoryModal = true;
                        }
                        // Si el juego terminó pero no hay ganador o no es el jugador actual
                        else {
                            console.log('💀 Mostrando modal de derrota');
                            this.showDefeatModal = true;
                        }
                    }, 100);

                    const gameCode = localStorage.getItem('gameCode');
                    const isHost = localStorage.getItem('isHost') === 'true';

                    if (gameCode && isHost) {
                        localStorage.removeItem('gameCode');
                        localStorage.removeItem('isHost');
                    }
                },

                handleStatusAction() {
                    // Función para manejar acciones del gameStatus
                    console.log('Acción de estado del juego ejecutada');
                },

                goToDashboardFromResult() {
                    this.showVictoryModal = false;
                    this.showDefeatModal = false;
                    this.gameResultsReady = false;
                    this.gameEnded = false;
                    this.gameFullyInitialized = false;

                    if (document.fullscreenElement) {
                        this.exitFullscreen();
                    }

                    localStorage.removeItem('gameCode');
                    localStorage.removeItem('isHost');

                    if (this.socket) {
                        this.socket.disconnect();
                    }

                    setTimeout(() => {
                        window.location.href = '/dashboard';
                    }, 300);
                },

                // Temporizadores de desconexión
                startHostDisconnectedCountdown() {
                    this.hostDisconnectedTimer = setInterval(() => {
                        this.hostDisconnectedCountdown--;

                        if (this.hostDisconnectedCountdown <= 0) {
                            this.clearHostDisconnectedTimer();
                            this.redirectToDashboard();
                        }
                    }, 1000);
                },

                clearHostDisconnectedTimer() {
                    if (this.hostDisconnectedTimer) {
                        clearInterval(this.hostDisconnectedTimer);
                        this.hostDisconnectedTimer = null;
                    }
                },

                startGameAlreadyStartedCountdown() {
                    this.gameAlreadyStartedTimer = setInterval(() => {
                        this.gameAlreadyStartedCountdown--;

                        if (this.gameAlreadyStartedCountdown <= 0) {
                            clearInterval(this.gameAlreadyStartedTimer);
                            this.goToDashboardFromGameStarted();
                        }
                    }, 1000);
                },

                goToDashboardFromGameStarted() {
                    if (this.gameAlreadyStartedTimer) {
                        clearInterval(this.gameAlreadyStartedTimer);
                        this.gameAlreadyStartedTimer = null;
                    }
                    this.showGameAlreadyStartedModal = false;
                    this.cleanupGameData();
                    window.location.href = '/dashboard';
                },

                goToDashboardFromModal() {
                    this.clearHostDisconnectedTimer();
                    this.redirectToDashboard();
                },

                redirectToDashboard() {
                    this.showHostDisconnectedModal = false;
                    this.showHostLeftModal = false;
                    this.cleanupGameData();
                    window.location.href = '/dashboard';
                },

                // Utilidades
                cleanupGameData() {
                    localStorage.removeItem('gameCode');
                    localStorage.removeItem('gameConfig');
                    localStorage.removeItem('isHost');

                    if (this.socket) {
                        this.socket.disconnect();
                    }

                    window.dispatchEvent(new CustomEvent('game-finished'));
                    console.log('Datos de juego limpiados y evento de reset disparado');
                },

                async copyRoomCode() {
                    try {
                        await navigator.clipboard.writeText(this.roomCode);
                        this.copySuccess = true;
                        setTimeout(() => {
                            this.copySuccess = false;
                        }, 2000);
                    } catch (err) {
                        console.error('Error al copiar:', err);
                        const textArea = document.createElement("textarea");
                        textArea.value = this.roomCode;
                        textArea.style.position = "fixed";
                        textArea.style.left = "-999999px";
                        textArea.style.top = "-999999px";
                        document.body.appendChild(textArea);
                        textArea.focus();
                        textArea.select();
                        document.execCommand('copy');
                        textArea.remove();
                        this.copySuccess = true;
                        setTimeout(() => {
                            this.copySuccess = false;
                        }, 2000);
                    }
                },

                playCardSound() {
                    if (!this.muted) {
                        try {
                            // Crear un sonido básico para nueva carta
                            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                            const oscillator = audioContext.createOscillator();
                            const gainNode = audioContext.createGain();

                            oscillator.connect(gainNode);
                            gainNode.connect(audioContext.destination);

                            oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
                            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
                            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);

                            oscillator.start(audioContext.currentTime);
                            oscillator.stop(audioContext.currentTime + 0.3);
                        } catch (err) {
                            console.log('Error reproduciendo sonido de carta:', err);
                        }
                    }
                },

                playSelectSound() {
                    if (!this.muted) {
                        try {
                            // Crear un sonido básico para selección
                            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                            const oscillator = audioContext.createOscillator();
                            const gainNode = audioContext.createGain();

                            oscillator.connect(gainNode);
                            gainNode.connect(audioContext.destination);

                            oscillator.frequency.setValueAtTime(1200, audioContext.currentTime);
                            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
                            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);

                            oscillator.start(audioContext.currentTime);
                            oscillator.stop(audioContext.currentTime + 0.2);
                        } catch (err) {
                            console.log('Error reproduciendo sonido de selección:', err);
                        }
                    }
                },

                playWinSound() {
                    if (!this.muted) {
                        try {
                            // Crear un sonido básico para ganar
                            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                            const oscillator = audioContext.createOscillator();
                            const gainNode = audioContext.createGain();

                            oscillator.connect(gainNode);
                            gainNode.connect(audioContext.destination);

                            oscillator.frequency.setValueAtTime(1500, audioContext.currentTime);
                            oscillator.frequency.setValueAtTime(1800, audioContext.currentTime + 0.1);
                            oscillator.frequency.setValueAtTime(2000, audioContext.currentTime + 0.2);

                            gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
                            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);

                            oscillator.start(audioContext.currentTime);
                            oscillator.stop(audioContext.currentTime + 0.5);
                        } catch (err) {
                            console.log('Error reproduciendo sonido de victoria:', err);
                        }
                    }
                },

                getInitials(name) {
                    if (!name) return '??';
                    const words = name.trim().split(' ');
                    if (words.length === 1) {
                        return words[0].substring(0, 2).toUpperCase();
                    }
                    return (words[0][0] + words[words.length - 1][0]).toUpperCase();
                },

                formatPlayerName(name) {
                    if (!name) return 'Jugador';

                    if (name.length <= 10) {
                        return name;
                    }

                    const words = name.split(' ');
                    if (words.length >= 2) {
                        if (words[0].length + words[1].length <= 12) {
                            return `${words[0]} ${words[1]}`;
                        } else {
                            return `${words[0]}<br>${words[1]}`;
                        }
                    }

                    if (name.length > 12) {
                        const midPoint = Math.ceil(name.length / 2);
                        return `${name.substring(0, midPoint)}<br>${name.substring(midPoint)}`;
                    }

                    return name;
                }
            }
        }

        // Cerrar el menú de usuario al hacer clic fuera
        document.addEventListener('click', function (event) {
            if (!event.target.closest('.user-menu-container')) {
                Alpine.store('userMenu', false);
            }
        });

        // Prevenir zoom en dispositivos móviles
        document.addEventListener('gesturestart', function (e) {
            e.preventDefault();
        });

        document.addEventListener('gesturechange', function (e) {
            e.preventDefault();
        });

        document.addEventListener('gestureend', function (e) {
            e.preventDefault();
        });

        // Manejar cierre de página/pestaña
        window.addEventListener('beforeunload', function () {
            // Obtener la instancia de Alpine y limpiar datos
            try {
                const gameApp = document.querySelector('[x-data]')?.__x?.$data;
                if (gameApp) {
                    gameApp.cleanupGameData();
                }
            } catch (e) {
                // Fallback: limpiar localStorage directamente
                localStorage.removeItem('gameCode');
                localStorage.removeItem('gameConfig');
                localStorage.removeItem('isHost');
            }
        });
    </script>
</body>

</html>